// Code generated by mockery v2.36.1. DO NOT EDIT.

package theapi

import (
	context "context"

	model "github.com/stephanvebrian/go-simple-api-jwt/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

// GetArticleById provides a mock function with given fields: ctx, id
func (_m *MockIRepository) GetArticleById(ctx context.Context, id int64) (model.GetArticleDetailResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 model.GetArticleDetailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.GetArticleDetailResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.GetArticleDetailResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.GetArticleDetailResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticles provides a mock function with given fields: ctx, limit, offset
func (_m *MockIRepository) GetArticles(ctx context.Context, limit int64, offset int64) (model.GetArticlesResponse, error) {
	ret := _m.Called(ctx, limit, offset)

	var r0 model.GetArticlesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (model.GetArticlesResponse, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) model.GetArticlesResponse); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		r0 = ret.Get(0).(model.GetArticlesResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx
func (_m *MockIRepository) GetProfile(ctx context.Context) (model.GetProfileResponse, error) {
	ret := _m.Called(ctx)

	var r0 model.GetProfileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (model.GetProfileResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) model.GetProfileResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(model.GetProfileResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefreshToken provides a mock function with given fields: ctx, request
func (_m *MockIRepository) GetRefreshToken(ctx context.Context, request model.GetRefreshTokenRequest) (model.GetRefreshTokenResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 model.GetRefreshTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetRefreshTokenRequest) (model.GetRefreshTokenResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetRefreshTokenRequest) model.GetRefreshTokenResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(model.GetRefreshTokenResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetRefreshTokenRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToken provides a mock function with given fields: ctx, request
func (_m *MockIRepository) GetToken(ctx context.Context, request model.GetTokenRequest) (model.GetTokenResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 model.GetTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetTokenRequest) (model.GetTokenResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetTokenRequest) model.GetTokenResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(model.GetTokenResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetTokenRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, request
func (_m *MockIRepository) Register(ctx context.Context, request model.CreateRegisterRequest) (model.CreateRegisterResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 model.CreateRegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateRegisterRequest) (model.CreateRegisterResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateRegisterRequest) model.CreateRegisterResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(model.CreateRegisterResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateRegisterRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
